# Workflow to build and test wheels
name: Wheel builder

on:
  push:
    branches:
      - main
      # Release branches
      - "[0-9]+.[0-9]+.X"

jobs:
  # Build the wheels for Linux
  build_wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python: [36, 37, 38]
        bitness: [32, 64]
        manylinux_image: [manylinux1, manylinux2010]
        include:
          # Run 32 and 64 bit version in parallel for Linux and Windows
          - os: ubuntu-latest
            bitness: 64
            platform_id: manylinux_x86_64
          - os: ubuntu-latest
            bitness: 32
            platform_id: manylinux_i686

    steps:
      - name: Checkout pyrfr
        uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Build and test wheels
        env:
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_TEST_REQUIRES: pytest threadpoolctl numpy<=1.19
          CIBW_BEFORE_ALL: "{project}/build_tools/build_wheels_env.sh"
          CIBW_TEST_COMMAND: bash {project}/build_tools/test_wheels.sh

        run: bash build_tools/build_wheels.sh

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*.whl

  # Build the source distribution under Linux
  build_sdist:
    name: Source distribution
    runs-on: ubuntu-latest

    steps:
      - name: Checkout pyrfr
        uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Build source distribution
        run: bash build_tools/build_source.sh

      - name: Test source distribution
        run: bash build_tools/test_source.sh

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  # Upload the wheels and the source distribution
  release_assets:
    name: Upload Release
    runs-on: ubuntu-latest
    needs: [build_wheels, build_sdist]
    # The artifacts cannot be uploaded on PRs
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout pyrfr
        uses: actions/checkout@v1

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: dist

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

          #- name: Publish python package
          #  id: publish_package
          #  env:
          #    TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          #    TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
          #  run: |
          #    twine upload dist/*

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python -m pip install --upgrade pip
          sudo apt-get install -y tree
          tree
          set -x
          assets=()
          for asset in ./dist/*/*; do
            assets+=("-a" "$asset")
          done
          tag_name="${GITHUB_REF##*/}"
          hub release create "${assets[@]}" -m "$tag_name" "$tag_name"
